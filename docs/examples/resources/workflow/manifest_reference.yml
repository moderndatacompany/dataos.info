name: ${resource_name} # Name of the Resource (mandatory)
version: v1beta # Manifest version of the Resource (mandatory)
type: worker # Type of Resource (mandatory)
tags: # Tags for categorizing the Resource (optional)
  - ${tag_example_1} 
  - ${tag_example_2} 
description: ${resource_description} # Description (optional)
owner: ${resource_owner} # Owner of the Resource (optional, default value: user-id of user deploying the resource)
layer: ${resource_layer} # DataOS Layer (optional, default value: user)
workflow:
  title: ${title of workflow}
  schedule: 
    cron: ${*/10 * * * *}
    concurrencyPolicy: ${Allow}
    endOn: ${2022-01-01T23:40:45Z}
    timezone: ${Asia/Kolkata}

  dag: 
    - name: ${job1-name}
      description: ${description}
      title: ${title of job}
      tags:
        - ${tag1}
        - ${tag2}
      gcWhenComplete: true
      spec: 
        stack: ${flare:5.0}
        logLevel: ${INFO}
        configs: 
          ${alpha: beta}
        envs: 
          ${random: delta}
        secrets: 
          - ${mysecret}
        dataosSecrets:
          - name: ${mysecret}
            workspace: ${curriculum}
            key: ${newone}
            keys:
              - ${newone}
              - ${oldone}
            allKeys: ${true}
            consumptionType: ${envVars}
        dataosVolumes: 
          - name: ${myVolume}
            directory: ${/file}
            readOnly: ${true}
            subPath: ${/random}
        tempVolume: ${abcd}
        persistentVolume:
          name: ${myVolume}
          directory: ${/file}
          readOnly: ${true}
          subPath: ${/random}
        compute: ${compute resource name}
          requests:
            cpu: ${100Mi}
            memory: ${100Gi}
          limits:
            cpu: ${100Mi}
            memory: ${100Gi}
        dryRun: ${true}
        runAsApiKey: ${abcdefghijklmnopqrstuvwxyz}
        runAsUser: ${iamgroot}
        topology:
          name: ${abcd} 
          type: ${efgh} 
          doc: ${abcd efgh}
          properties: 
            ${alpha: random}
          dependencies: 
            - ${abc}
        file: ${abcd}
        retry: 
          count: ${2} 
          strategy: ${"OnTransientError"}
          duration: <string>
          maxDuration: <string> 
